name: CI/CD Pipeline Vollo
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Login Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build e Push Backend
        run: |
          docker build -t morerao/vollo-backend:${{ github.sha }} ./backend
          docker push morerao/vollo-backend:${{ github.sha }}

      - name: Build e Push Frontend
        run: |
          docker build -t morerao/vollo-frontend:${{ github.sha }} ./frontend
          docker push morerao/vollo-frontend:${{ github.sha }}

  sonarqube-analysis:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar chave SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

      - name: Subir SonarQube temporário no servidor remoto
        run: |
          ssh -o StrictHostKeyChecking=no aluno@201.23.3.86 '
            docker stop sonartmp || true && docker rm sonartmp || true
            docker pull sonarqube:community
            docker run -d --name sonartmp -p 8133:9000 sonarqube:community
            sleep 10
            if ! docker ps | grep sonartmp; then
              echo "--- Falha ao iniciar SonarQube ---"
              docker logs sonartmp || true
              exit 1
            fi
          '

      - name: Download and install jq on remote server
        run: |
          ssh -o StrictHostKeyChecking=no aluno@201.23.3.86 '
            wget -qO /home/aluno/jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 && chmod +x /home/aluno/jq
          '

      - name: Esperar SonarQube inicializar completamente via API
        env:
          SONAR_USER: admin
          SONAR_PASS: admin
        run: |
          ssh -o StrictHostKeyChecking=no aluno@201.23.3.86 '
            JQ_PATH="/home/aluno/jq"
            echo "Aguardando SonarQube atingir status UP..."
            for i in {1..50}; do
              STATUS=$(curl -s -u "$SONAR_USER:$SONAR_PASS" "http://localhost:8133/api/system/status" | "$JQ_PATH" -r .status)
              echo "Status atual: $STATUS"
              if [ "$STATUS" = "UP" ]; then
                echo "SonarQube online."
                exit 0
              fi
              sleep 6
            done
            echo "SonarQube não subiu a tempo! Log:"
            docker logs sonartmp
            exit 1
          '

      - name: Criar token do admin via API REST
        id: get_sonar_token
        env:
          SONAR_USER: admin
          SONAR_PASS: admin
        run: |
          JQ_PATH="/home/aluno/jq"
          SONAR_TOKEN=$(ssh -o StrictHostKeyChecking=no aluno@201.23.3.86 "curl -s -u \"$SONAR_USER:$SONAR_PASS\" -X POST 'http://localhost:8133/api/user_tokens/generate?name=ci-token' | \"$JQ_PATH\" -r .token")
          echo "::add-mask::$SONAR_TOKEN"
          echo "SONAR_TOKEN=$SONAR_TOKEN" >> $GITHUB_ENV

      - name: Instalar SonarScanner CLI
        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip -o sonar-scanner.zip

      - name: Rodar análise SonarScanner
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
        run: |
          export PATH="$PWD/sonar-scanner-5.0.1.3006-linux/bin:$PATH"
          sonar-scanner \
            -Dsonar.projectKey=vollo-project \
            -Dsonar.sources=. \
            -Dsonar.host.url=http://201.23.3.86:8133 \
            -Dsonar.token=$SONAR_TOKEN

      - name: Validar Quality Gate do SonarQube remoto
        env:
          SONAR_USER: admin
          SONAR_PASS: admin
        run: |
          echo "Aguardando Quality Gate..."
          sleep 10
          for i in {1..30}; do
            QG=$(curl -u $SONAR_USER:$SONAR_PASS "http://201.23.3.86:8133/api/qualitygates/project_status?projectKey=vollo-project" | jq -r .projectStatus.status)
            echo "Quality Gate: $QG"
            if [[ "$QG" == "OK" ]]; then exit 0; fi
            if [[ "$QG" == "ERROR" ]]; then echo "Quality Gate falhou"; exit 1; fi
            sleep 6
          done
          echo "Quality Gate não retornou status OK/ERROR a tempo"
          ssh -o StrictHostKeyChecking=no aluno@201.23.3.86 'docker logs sonartmp'
          exit 1

      - name: Parar e remover SonarQube temporário
        if: always()
        run: |
          ssh -o StrictHostKeyChecking=no aluno@201.23.3.86 '
            docker stop sonartmp || true
            docker rm sonartmp || true
          '

  deploy:
    needs: sonarqube-analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar chave SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

      - name: Login Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Preparar .env com variáveis de deploy
        run: |
          cat > .env <<EOF
          BACKEND_TAG=${{ github.sha }}
          FRONTEND_TAG=${{ github.sha }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASS=${{ secrets.DB_PASS }}
          EOF

      - name: Criar diretório de deploy
        run: |
          ssh -o StrictHostKeyChecking=no aluno@201.23.3.86 '
            mkdir -p /home/aluno/proj-vollo
          '

      - name: Enviar arquivos para o servidor
        run: |
          scp -o StrictHostKeyChecking=no -r * aluno@201.23.3.86:/home/aluno/projeto-vollo/

      - name: Executar deploy remoto
        run: |
          ssh -o StrictHostKeyChecking=no aluno@201.23.3.86 '
            cd /home/aluno/projeto-vollo
            docker login
            docker compose pull
            docker compose down
            docker compose up -d --build
          '

      - name: Limpar imagens antigas
        run: |
          ssh -o StrictHostKeyChecking=no aluno@201.23.3.86 '
            docker image prune -f
          '