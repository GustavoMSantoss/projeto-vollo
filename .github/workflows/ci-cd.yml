name: CI/CD Pipeline Vollo
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
      - name: Login Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build e Push Backend
        run: |
          docker build -t morerao/vollo-backend:${{ github.sha }} ./backend
          docker push morerao/vollo-backend:${{ github.sha }}
      - name: Build e Push Frontend
        run: |
          docker build -t morerao/vollo-frontend:${{ github.sha }} ./frontend
          docker push morerao/vollo-frontend:${{ github.sha }}
  
  sonarqube-analysis:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
      - name: Configurar SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}
      - name: Executar SonarQube no Servidor Remoto
        env:
          SSH_HOST: 201.23.3.86
          SSH_USER: aluno
        run: |
          ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
          ssh $SSH_USER@$SSH_HOST << EOF
            # Criar diretório temporário
            mkdir -p ~/sonarqube-temp
            cd ~/sonarqube-temp
            # Baixar docker-compose do SonarQube
            cat > docker-compose.yml << INNER
            version: '3'
            services:
              sonarqube:
                image: sonarqube:community
                ports:
                  - "9000:9000"
                environment:
                  - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
            INNER
            # Iniciar container SonarQube
            docker-compose up -d
            # Aguardar inicialização
            sleep 45
            # Clonar repositório
            git clone https://github.com/${{ github.repository }}.git
            cd ${{ github.event.repository.name }}
            # Executar análise SonarQube
            docker run --network host sonarsource/sonar-scanner-cli \
              -Dsonar.host.url=http://localhost:9000 \
              -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
              -Dsonar.projectKey=vollo-project \
              -Dsonar.sources=. \
              -Dsonar.exclusions=**/*.test.js,**/*.spec.js
            # Capturar resultado da análise
            SONAR_STATUS=$(docker run --network host sonarsource/sonar-scanner-cli \
              -Dsonar.host.url=http://localhost:9000 \
              -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
              -Dsonar.projectKey=vollo-project \
              --format=json | jq -r '.qualityGate.status')
            # Parar e remover container
            docker-compose down
            # Verificar status da análise
            if [ "$SONAR_STATUS" != "OK" ]; then
              echo "Análise de código falhou"
              exit 1
            fi
          EOF
          
  deploy:
    needs: sonarqube-analysis
    runs-on: ubuntu-latest
    steps:
      - name: Deploy no Servidor
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: 201.23.3.86
          username: aluno
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # Definir variáveis para facilitar execução com sudo
            export PATH=$PATH:/usr/local/bin
            
            # Instalar Docker Compose de forma não interativa
            if ! command -v docker-compose &> /dev/null; then
              echo "Docker Compose não encontrado. Instalando..."
              sudo -n true || (echo "Sudo sem senha não configurado" && exit 1)
              sudo -E bash -c '
                curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                chmod +x /usr/local/bin/docker-compose
              '
            fi

            # Gerenciar container SonarQube de forma mais robusta
            docker ps -a | grep sonartmp && docker stop sonartmp
            docker ps -a | grep sonartmp && docker rm sonartmp

            docker pull sonarqube:community
            docker run -d --name sonartmp -p 9000:9000 sonarqube:community
            sleep 30 # Aumentar tempo de espera para inicialização

            # Navegar para o diretório do projeto
            cd ~/projeto-vollo || (echo "Diretório não encontrado" && exit 1)

            # Garantir que docker-compose está disponível
            docker-compose version || (echo "Docker Compose ainda não instalado" && exit 1)

            # Atualizar imagens
            docker-compose pull

            # Parar e remover containers atuais
            docker-compose down

            # Subir novos containers
            docker-compose up -d

            # Limpar imagens antigas
            docker image prune -f